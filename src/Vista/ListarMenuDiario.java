package Vista;

import Modelo.Dieta;
import Modelo.Paciente;
import Modelo.Comidas;
import Modelo.MenuDiario;
import Persistencia.DietaData;
import Persistencia.MenuDiarioData;
import Persistencia.PacienteData;
import java.util.ArrayList;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ListarMenuDiario extends javax.swing.JInternalFrame {

    MenuDiarioData menuAcceso = new MenuDiarioData();
    private DefaultTableModel modelo;

    public ListarMenuDiario() {
        initComponents();
        modelo = (DefaultTableModel) jTMenuComida.getModel();
        cargarDietas();
        deshabilitar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCBDieta = new javax.swing.JComboBox<>();
        jCBEstado = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jCBDia = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jCBMenu = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTMenuComida = new javax.swing.JTable();
        jBHabilitar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTFPaciente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jBSalir = new javax.swing.JButton();

        setFocusable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("Seleccione un Dieta:");

        jCBDieta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBDietaActionPerformed(evt);
            }
        });

        jCBEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Menu Activo", "Menu Inactivo", "Todos los Menu" }));
        jCBEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBEstadoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 102));
        jLabel2.setText("Estado del Menu:");

        jCBDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dia 1", "Dia 2", "Dia 3", "Dia 4", "Dia 5", "Dia 6", "Dia 7" }));
        jCBDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBDiaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 102));
        jLabel3.setText("Seleccione un Dia:");

        jCBMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBMenuActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 102));
        jLabel4.setText("Seleccione un Menu");

        jTMenuComida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "IdMenuDiario", "IdComida", "Nombre de Comida", "Tipo de Comida", "Calorias", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jTMenuComida);

        jBHabilitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/alta.png"))); // NOI18N
        jBHabilitar.setText("Alta");
        jBHabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHabilitarActionPerformed(evt);
            }
        });

        jBEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/baja.png"))); // NOI18N
        jBEliminar.setText("Baja");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 102));
        jLabel5.setText("Lista de Men√∫s Almacenados");

        jTFPaciente.setEditable(false);
        jTFPaciente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTFPaciente.setEnabled(false);
        jTFPaciente.setFocusable(false);
        jTFPaciente.setRequestFocusEnabled(false);
        jTFPaciente.setVerifyInputWhenFocusTarget(false);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 102));
        jLabel7.setText("Paciente:");

        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/puerta-abierta.png"))); // NOI18N
        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(23, 23, 23)
                        .addComponent(jCBDia, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jCBMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(jCBDieta, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCBEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(116, 116, 116))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jTFPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jBHabilitar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBSalir)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTFPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBHabilitar)
                            .addComponent(jBEliminar)
                            .addComponent(jBSalir))
                        .addGap(32, 32, 32))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCBDieta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCBEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCBDia, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCBMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBHabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHabilitarActionPerformed
        if (jCBDieta.getSelectedItem() != null && jCBEstado.getSelectedItem() != null && jCBDia.getSelectedItem() != null
                && jCBMenu.getSelectedItem() != null) {

            int dia = 1;
            switch (jCBDia.getSelectedItem().toString()) {
            case "Dia 1": dia = 1; break;
            case "Dia 2": dia = 2; break;
            case "Dia 3": dia = 3; break;
            case "Dia 4": dia = 4; break;
            case "Dia 5": dia = 5; break;
            case "Dia 6": dia = 6; break;
            case "Dia 7": dia = 7; break;
        }

            if (menuAcceso.buscarMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), dia) == null) {
                if (menuAcceso.contadorMenuDiariosInactivoDeUnaDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()) != 0) {
                    menuAcceso.altaLogica(((MenuDiario) jCBMenu.getSelectedItem()).getIdMenu());

                    if (menuAcceso.buscarMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), dia) != null) {
                        int contador = menuAcceso.contadorMenuDiariosDeUnaDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta());
                        if (contador >= 3) {
                            if (menuAcceso.verificarDiasActivosMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta())) {
                                jCBDieta.setEnabled(true);
                                jCBDieta.setSelectedIndex(-1);
                                jCBMenu.setSelectedIndex(-1);
                                jCBDia.setSelectedIndex(-1);
                                jCBMenu.setEnabled(false);
                                jCBDia.setEnabled(false);
                                
                                
                            } else {
                                jCBDieta.setEnabled(false);
                                jCBDia.setEnabled(false);
                                jCBMenu.setEnabled(false);
                                jCBEstado.setSelectedIndex(-1);
                                jCBDia.setSelectedIndex(-1);
                                jCBMenu.setSelectedIndex(-1);
                            }
                        } else {
                            jCBDieta.setEnabled(false);
                            jCBDia.setEnabled(false);
                            jCBMenu.setEnabled(false);
                            jCBEstado.setSelectedIndex(-1);
                            jCBDia.setSelectedIndex(-1);
                            jCBMenu.setSelectedIndex(-1);
                        }
                        if (contador == 0) {

                            jCBDieta.setEnabled(true);
                            jCBDieta.setSelectedIndex(-1);
                            jCBMenu.setSelectedIndex(-1);
                            jCBDia.setSelectedIndex(-1);
                            jCBMenu.setEnabled(false);
                            jCBDia.setEnabled(false);

                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ya existe un menu diario asociado a ese dia habilitado");
            }

        }

    }//GEN-LAST:event_jBHabilitarActionPerformed

    private void jCBMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBMenuActionPerformed
        if (Objects.nonNull(((MenuDiario) jCBMenu.getSelectedItem()))) {
            //Mostrar todas las comidas asociadas al menudiario 
            listarMenuComidas(((MenuDiario) jCBMenu.getSelectedItem()));
            if (jCBEstado.getSelectedItem().equals("Menu Activo")) {
                jBEliminar.setEnabled(true);
            } else if (jCBEstado.getSelectedItem().equals("Menu Inactivo")) {
                jBHabilitar.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jCBMenuActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        if (jCBDieta.getSelectedItem() != null && jCBEstado.getSelectedItem() != null && jCBDia.getSelectedItem() != null
                && jCBMenu.getSelectedItem() != null) {

            int dia = 1;
            switch (jCBDia.getSelectedItem().toString()) {
                case "Dia 1":
                    dia = 1;
                    break;
                case "Dia 2":
                    dia = 2;
                    break;
                case "Dia 3":
                    dia = 3;
                    break;
                case "Dia 4":
                    dia = 4;
                    break;
                case "Dia 5":
                    dia = 5;
                    break;
                case "Dia 6":
                    dia = 6;
                    break;
                case "Dia 7":
                    dia = 7;
                    break;
            }
            if (Objects.nonNull(menuAcceso.buscarMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), dia))) {
                if (menuAcceso.contadorMenuDiariosDeUnaDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()) != 0) {
                    menuAcceso.bajaLogica(((MenuDiario) jCBMenu.getSelectedItem()).getIdMenu());
                    if (menuAcceso.contadorMenuDiariosDeUnaDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()) >= 3) {
                        if (menuAcceso.verificarDiasActivosMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta())) {
                            jCBDieta.setEnabled(true);
                            jCBDieta.setSelectedIndex(-1);
                            jCBMenu.setSelectedIndex(-1);
                            jCBDia.setSelectedIndex(-1);
                            jCBMenu.setEnabled(false);
                            jCBDia.setEnabled(false);
                        } else {
                            jCBDieta.setEnabled(false);
                            jCBDia.setEnabled(false);
                            jCBMenu.setEnabled(false);
                            jCBEstado.setSelectedIndex(-1);
                            jCBDia.setSelectedIndex(-1);
                            jCBMenu.setSelectedIndex(-1);
                        }
                    } else {
                        jCBDieta.setEnabled(false);
                        jCBDia.setEnabled(false);
                        jCBMenu.setEnabled(false);
                        jCBEstado.setSelectedIndex(-1);
                        jCBDia.setSelectedIndex(-1);
                        jCBMenu.setSelectedIndex(-1);
                    }
                    if (menuAcceso.contadorMenuDiariosDeUnaDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()) == 0) {

                        jCBDieta.setEnabled(true);
                        jCBDieta.setSelectedIndex(-1);
                        jCBMenu.setSelectedIndex(-1);
                        jCBDia.setSelectedIndex(-1);
                        jCBMenu.setEnabled(false);
                        jCBDia.setEnabled(false);

                    }

                }
            } else {
                JOptionPane.showMessageDialog(this, "No existe el menu diario a deshabilitar");
            }

        }
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jCBDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBDiaActionPerformed
        // Carga los Menudiarios que son activos/inactivos y restringido por el dia
        jCBMenu.removeAllItems();

        if (Objects.nonNull((String) jCBDia.getSelectedItem()) && jCBDia.getSelectedIndex() != -1 && Objects.nonNull((String) jCBEstado.getSelectedItem()) && Objects.nonNull((Dieta) jCBDieta.getSelectedItem())) {
            ArrayList<MenuDiario> comidas = null;

            switch ((String) jCBDia.getSelectedItem()) {
                case "Dia 1":
                    // Si son habilitados
                    if (jCBEstado.getSelectedItem() == "Menu Activo") {
                        comidas = menuAcceso.listarMenuDiarioActivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 1);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    // Si son deshabilitados
                    if (jCBEstado.getSelectedItem() == "Menu Inactivo") {
                        comidas = menuAcceso.listarMenuDiarioInactivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 1);

                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    //Todos los menus diarios
                    if (jCBEstado.getSelectedItem() == "Todos los Menu"){
                        comidas = menuAcceso.listarMenuDiarioPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 1);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    
                    break;
                case "Dia 2":

                    // Si son habilitados
                    if (jCBEstado.getSelectedItem() == "Menu Activo") {
                        comidas = menuAcceso.listarMenuDiarioActivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 2);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    // Si son deshabilitados
                    if (jCBEstado.getSelectedItem() == "Menu Inactivo") {
                        comidas = menuAcceso.listarMenuDiarioInactivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 2);

                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    //Todos los menus diarios
                    if (jCBEstado.getSelectedItem() == "Todos los Menu"){
                        comidas = menuAcceso.listarMenuDiarioPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 2);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    break;
                case "Dia 3":
                    // Si son habilitados
                    if (jCBEstado.getSelectedItem() == "Menu Activo") {
                        comidas = menuAcceso.listarMenuDiarioActivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 3);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    // Si son deshabilitados
                    if (jCBEstado.getSelectedItem() == "Menu Inactivo") {
                        comidas = menuAcceso.listarMenuDiarioInactivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 3);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    //Todos los menus diarios
                    if (jCBEstado.getSelectedItem() == "Todos los Menu"){
                        comidas = menuAcceso.listarMenuDiarioPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 3);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    break;
                case "Dia 4":
                    // Si son habilitados
                    if (jCBEstado.getSelectedItem() == "Menu Activo") {
                        comidas = menuAcceso.listarMenuDiarioActivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 4);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    // Si son deshabilitados
                    if (jCBEstado.getSelectedItem() == "Menu Inactivo") {
                        comidas = menuAcceso.listarMenuDiarioInactivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 4);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    //Todos los menus diarios
                    if (jCBEstado.getSelectedItem() == "Todos los Menu"){
                        comidas = menuAcceso.listarMenuDiarioPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 4);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    
                    break;
                case "Dia 5":
                    // Si son habilitados
                    if (jCBEstado.getSelectedItem() == "Menu Activo") {
                        comidas = menuAcceso.listarMenuDiarioActivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 5);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    // Si son deshabilitados
                    if (jCBEstado.getSelectedItem() == "Menu Inactivo") {
                        comidas = menuAcceso.listarMenuDiarioInactivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 5);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    //Todos los menus diarios
                    if (jCBEstado.getSelectedItem() == "Todos los Menu"){
                        comidas = menuAcceso.listarMenuDiarioPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 5);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    break;
                case "Dia 6":
                    // Si son habilitados
                    if (jCBEstado.getSelectedItem() == "Menu Activo") {
                        comidas = menuAcceso.listarMenuDiarioActivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 6);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    // Si son deshabilitados
                    if (jCBEstado.getSelectedItem() == "Menu Inactivo") {
                        comidas = menuAcceso.listarMenuDiarioInactivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 6);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    //Todos los menus diarios
                    if (jCBEstado.getSelectedItem() == "Todos los Menu"){
                        comidas = menuAcceso.listarMenuDiarioPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 6);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    break;
                case "Dia 7":
                    // Si son habilitados
                    if (jCBEstado.getSelectedItem() == "Menu Activo") {
                        comidas = menuAcceso.listarMenuDiarioActivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 7);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    // Si son deshabilitados
                    if (jCBEstado.getSelectedItem() == "Menu Inactivo") {
                        comidas = menuAcceso.listarMenuDiarioInactivoPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 7);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                            jCBMenu.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    //Todos los menus diarios
                    if (jCBEstado.getSelectedItem() == "Todos los Menu"){
                        comidas = menuAcceso.listarMenuDiarioPorDietaYDia(((Dieta) jCBDieta.getSelectedItem()).getIdDieta(), 7);
                        if (!comidas.isEmpty()) {
                            for (MenuDiario comida : comidas) {
                                jCBMenu.addItem(menuAcceso.buscarMenuDiario(comida.getIdMenu()));
                            }
                            enlistarMenuComidas(comidas);
                        } else {
                            JOptionPane.showMessageDialog(this, "No existen menus diarios asociados al " + jCBDia.getSelectedItem());
                            jCBMenu.setEnabled(false);
                            modelo.setRowCount(0);
                        }
                    }
                    break;
            }

        }
        jCBMenu.setSelectedIndex(-1);
        jBEliminar.setEnabled(false);
        jBHabilitar.setEnabled(false);

    }//GEN-LAST:event_jCBDiaActionPerformed

    private void jCBEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBEstadoActionPerformed
        // Listar todos los menus por el estado seleccionado

        if (Objects.nonNull(jCBDieta.getSelectedItem()) && Objects.nonNull(jCBEstado.getSelectedItem())) {
            if (jCBEstado.getSelectedItem().equals("Menu Activo")) {
                if (!menuAcceso.listarMenuDiarioActivoPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()).isEmpty()) {
                    enlistarMenuComidas(menuAcceso.listarMenuDiarioActivoPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()));

                    // Habilitar jCBDia y desactivar jCBMenu
                    jCBDia.setEnabled(true);
                    jCBDia.setSelectedIndex(-1);
                    jCBMenu.setEnabled(false); // Desactiva jCBMenu

                } else {
                    JOptionPane.showMessageDialog(this, "Esta Dieta no tiene Menus Diarios Activos");
                    modelo.setRowCount(0);
                    jCBDia.setEnabled(false);
                    jCBDia.setSelectedIndex(-1);
                    jCBMenu.setEnabled(false);
                }
            } else if (jCBEstado.getSelectedItem().equals("Menu Inactivo")) {
                if (!menuAcceso.listarMenuDiarioInactivoPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()).isEmpty()) {
                    enlistarMenuComidas(menuAcceso.listarMenuDiarioInactivoPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()));

                    jCBDia.setEnabled(true);
                    jCBDia.setSelectedIndex(-1);
                    jCBMenu.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "Esta Dieta no tiene Menus Diarios Inactivos");
                    modelo.setRowCount(0);
                    jCBDia.setEnabled(false);
                    jCBDia.setSelectedIndex(-1);
                    jCBMenu.setEnabled(false);
                }
            } else if (jCBEstado.getSelectedItem().equals("Todos los Menu")) {
                if (!menuAcceso.listarMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()).isEmpty()) {
                    enlistarMenuComidas(menuAcceso.listarMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()));

                    jCBDia.setEnabled(true);
                    jCBDia.setSelectedIndex(-1);
                    jCBMenu.setEnabled(false);

                } else {
                    JOptionPane.showMessageDialog(this, "Esta Dieta no tiene Menus Diarios");
                    modelo.setRowCount(0);
                    jCBDia.setEnabled(false);
                    jCBDia.setSelectedIndex(-1);
                    jCBMenu.setEnabled(false);
                }

            }
        }

    }//GEN-LAST:event_jCBEstadoActionPerformed

    private void jCBDietaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBDietaActionPerformed
        jCBEstado.setSelectedIndex(-1);
        jCBEstado.setEnabled(false);
        if (jCBDieta.getSelectedIndex() != -1 && Objects.nonNull(jCBDieta.getSelectedItem())) {
            jCBEstado.setEnabled(true);
            DietaData dietaData = new DietaData();
            PacienteData pacData = new PacienteData();
            Paciente pac = new Paciente();
            pac = pacData.buscarPaciente(dietaData.buscarDietaSegunID(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()).getPaciente().getIdPaciente());
            if (pac != null) { // Verificaci√≥n de null
                jTFPaciente.setText(pac.getIdPaciente() + " " + pac.getNombre());
                jCBEstado.setEnabled(true);
            } else {
                jTFPaciente.setText("");
            }
        }
    }//GEN-LAST:event_jCBDietaActionPerformed

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        if (Objects.nonNull(((Dieta) jCBDieta.getSelectedItem()))) {
            if (menuAcceso.contadorMenuDiariosDeUnaDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()) >= 3) {
                if (menuAcceso.verificarDiasActivosMenuDiarioPorDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()) == true) {
                    this.dispose();
                }
            } else if (menuAcceso.contadorMenuDiariosDeUnaDieta(((Dieta) jCBDieta.getSelectedItem()).getIdDieta()) == 0) {
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "La Cantidad de menu diarios activos es menor a 3");
            }
        } else {
            this.dispose();
        }

    }//GEN-LAST:event_jBSalirActionPerformed

    //Auxiliares
    private void cargarDietas() {
        MenuDiarioData munuData = new MenuDiarioData();
        for (Dieta aux : munuData.listarTodasLasDietasActivas()) {
            jCBDieta.addItem(aux);
        }
    }

    private void deshabilitar() {
        jBEliminar.setEnabled(false);
        jBHabilitar.setEnabled(false);

        jCBDieta.setSelectedIndex(-1);
        jCBDia.setSelectedIndex(-1);
        jCBEstado.setSelectedIndex(-1);
        jCBMenu.setSelectedIndex(-1);
        jTFPaciente.setText(null);

        jCBDia.setEnabled(false);
        jCBMenu.setEnabled(false);
        jCBEstado.setEnabled(false);

    }

    private void enlistarMenuComidas(ArrayList<MenuDiario> menuLista) {
        modelo.setRowCount(0);
        if (!menuLista.isEmpty()) {
            String estado = "";
            for (MenuDiario aux : menuLista) {
                if (aux.isEstado()) {
                    estado = "Activo";
                } else {
                    estado = "Inactivo";
                }
                for (Comidas comidas : menuAcceso.listarComidasPorMenuDiario(aux.getIdMenu())) {
                    modelo.addRow(new Object[]{
                        aux.getIdMenu(),
                        comidas.getIdComida(),
                        comidas.getNombre(),
                        comidas.getTipoDeComida(),
                        comidas.getCaloriasComida(),
                        estado}
                    );
                }
            }
        }
    }

    private void listarMenuComidas(MenuDiario menu) {
        modelo.setRowCount(0);
        if (Objects.nonNull(menu)) {
            String estado = "";
            if (menu.isEstado()) {
                estado = "Activo";
            } else {
                estado = "Inactivo";
            }
            for (Comidas comidas : menuAcceso.listarComidasPorMenuDiario(menu.getIdMenu())) {

                modelo.addRow(new Object[]{
                    menu.getIdMenu(),
                    comidas.getIdComida(),
                    comidas.getNombre(),
                    comidas.getTipoDeComida(),
                    comidas.getCaloriasComida(),
                    estado
                });
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBHabilitar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JComboBox<String> jCBDia;
    private javax.swing.JComboBox<Dieta> jCBDieta;
    private javax.swing.JComboBox<String> jCBEstado;
    private javax.swing.JComboBox<MenuDiario> jCBMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFPaciente;
    private javax.swing.JTable jTMenuComida;
    // End of variables declaration//GEN-END:variables
}
